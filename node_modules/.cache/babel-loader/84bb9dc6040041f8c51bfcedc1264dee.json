{"ast":null,"code":"import _slicedToArray from \"/Users/johntraut/code/Project3/nyacht_project3/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/johntraut/code/Project3/nyacht_project3/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/johntraut/code/Project3/nyacht_project3/src/components/Store.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios'; //provides a way to pass data through the componenet tree without using props. \n\nexport const CTX = React.createContext(); // chat will come in like\n//from: 'user'\n//msg: 'hi'\n//topic: 'general'\n\nconst initState = {\n  //topic or catagory \n  general: [//messages in those catagoires \n  {\n    from: 'General Bot',\n    msg: 'Welcome to our Cruise!'\n  }],\n  NightLife: [{\n    from: 'Night Life Bot',\n    msg: 'Welcome to the Night Life Page!'\n  }],\n  Families: [{\n    from: 'Family Bot',\n    msg: 'Welcome Families!'\n  }],\n  Outings: [{\n    from: 'Outings Bot',\n    msg: 'Welcome to the Outings Page!'\n  }]\n}; //action is an object that we pass in\n\nconst reducer = (state, action) => {\n  //destruct to make more clean \n  switch (action.type) {\n    case 'RECEIVE_MESSAGE':\n      const _action$payload = action.payload,\n            from = _action$payload.from,\n            msg = _action$payload.msg,\n            topic = _action$payload.topic;\n      return _objectSpread({}, state, {\n        //then overwrite the old state with the new object in front\n        [topic]: [//then bring forward all old messages in the topic\n        ...state[topic], {\n          from,\n          msg\n        }]\n      });\n\n    case 'FETCH_MESSAGES':\n      return _objectSpread({}, state, {\n        [topic]: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nlet socket; //this is our funnction to emit someyhing\n\nfunction sendChatAction(value) {\n  socket.emit(\"chat message\", value);\n}\n\nfunction enterChatRoomAction(value) {\n  socket.emit(\"chatroom enter\", value);\n}\n\nexport default function Store(props) {\n  const _React$useReducer = React.useReducer(reducer, initState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        allChats = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  if (!socket) {\n    socket = io(':3002');\n    socket.on('chat message', function (msg) {\n      console.log(\"Message test \", msg);\n      dispatch({\n        type: 'RECEIVE_MESSAGE',\n        payload: msg\n      });\n    });\n    socket.on('chatroom enter', function (chatroom) {\n      console.log(\"chatroom enter\", chatroom);\n      axios.get(\"/chat/allchannels/\".concat(chatroom)).then(function (results) {\n        console.log(results);\n        dispatch({\n          type: 'FETCH_MESSAGES',\n          payload: results.data\n        });\n      });\n    });\n  } //temporary\n  //---------------\n  //define user here\n\n\n  const user = 'John' + Math.random(100).toFixed(2); ///--------\n\n  return (//values that are being passed to all childern nested with this component\n    React.createElement(CTX.Provider, {\n      value: {\n        allChats,\n        sendChatAction,\n        enterChatRoomAction,\n        user\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, props.children)\n  );\n}","map":{"version":3,"sources":["/Users/johntraut/code/Project3/nyacht_project3/src/components/Store.js"],"names":["React","io","axios","CTX","createContext","initState","general","from","msg","NightLife","Families","Outings","reducer","state","action","type","payload","topic","socket","sendChatAction","value","emit","enterChatRoomAction","Store","props","useReducer","allChats","dispatch","on","console","log","chatroom","get","then","results","data","user","Math","random","toFixed","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client'\nimport axios from 'axios';\n\n//provides a way to pass data through the componenet tree without using props. \nexport const CTX = React.createContext();\n\n\n// chat will come in like\n//from: 'user'\n//msg: 'hi'\n//topic: 'general'\n\nconst initState = {\n    //topic or catagory \n    general: [\n        //messages in those catagoires \n        {from: 'General Bot', msg:'Welcome to our Cruise!'},\n       \n    ],\n    NightLife: [\n        {from: 'Night Life Bot', msg:'Welcome to the Night Life Page!'},\n       \n\n    ],\n    Families: [\n        {from: 'Family Bot', msg:'Welcome Families!'}\n    ],\n    Outings: [\n        {from: 'Outings Bot', msg:'Welcome to the Outings Page!'}\n    ]\n\n\n}\n\n//action is an object that we pass in\nconst reducer = (state, action) => {\n\n    //destruct to make more clean \n    switch(action.type){\n        case 'RECEIVE_MESSAGE':\n            const {from, msg, topic} = action.payload;\n            return {\n                //bring in our entire state\n                ...state,\n                //then overwrite the old state with the new object in front\n                [topic]: \n                [\n                    //then bring forward all old messages in the topic\n                ...state[topic], {from, msg}\n                ]\n            }\n        case 'FETCH_MESSAGES' :\n            return{\n                ...state,\n                [topic]: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nlet socket;\n\n//this is our funnction to emit someyhing\nfunction sendChatAction(value){\n\n     socket.emit(\"chat message\", value) \n}\n\nfunction enterChatRoomAction(value){\n    \n    socket.emit(\"chatroom enter\", value)\n}\n\nexport default function Store(props) {\n\n    const [allChats, dispatch] = React.useReducer(reducer, initState)\n\n    if(!socket) {\n        socket = io(':3002')\n        socket.on('chat message', function(msg){\n            console.log(\"Message test \", msg)\n           dispatch({ type: 'RECEIVE_MESSAGE', payload: msg });\n    })\n        socket.on('chatroom enter', function(chatroom){\n            console.log(\"chatroom enter\", chatroom)\n            axios.get(`/chat/allchannels/${chatroom}`)\n            .then(function(results){\n                console.log(results)\n                dispatch({ type: 'FETCH_MESSAGES', payload: results.data })\n            })\n\n        })\n}\n\n//temporary\n//---------------\n//define user here\nconst user = 'John' + Math.random(100).toFixed(2);\n\n///--------\n\n\n\n    return (\n        //values that are being passed to all childern nested with this component\n        <CTX.Provider value={{allChats, sendChatAction, enterChatRoomAction, user}}>\n            {props.children}\n        </CTX.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}