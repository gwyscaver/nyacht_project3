{"ast":null,"code":"import _slicedToArray from \"/Users/johntraut/code/Project3/nyacht_project3/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/johntraut/code/Project3/nyacht_project3/src/components/Dashboard.js\";\nimport React, { useState, useEffect } from \"react\"; //for general style of MaterialUI\n\nimport { makeStyles } from \"@material-ui/core/styles\"; //for paper items--\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\"; //\n//for list items--\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\"; //\n//for user icon in chat window--\n\nimport Chip from '@material-ui/core/Chip'; //\n//for buttons---\n\nimport Button from '@material-ui/core/Button'; //\n//for textFeild--\n\nimport TextField from '@material-ui/core/TextField'; //\n\nimport { CTX } from './Store'; //where we can assign css values\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"50px\",\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  topicsWindow: {\n    width: \"30%\",\n    height: \"300px\",\n    borderRight: \"1px solid grey\"\n  },\n  chatWindow: {\n    width: \"70%\",\n    height: \"300px\",\n    padding: \"20px\"\n  },\n  chatBox: {\n    width: \"85%\"\n  },\n  button: {\n    width: \"15%\"\n  }\n}));\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  const _React$useContext = React.useContext(CTX),\n        allChats = _React$useContext.allChats,\n        sendChatAction = _React$useContext.sendChatAction,\n        enterChatRoomAction = _React$useContext.enterChatRoomAction,\n        user = _React$useContext.user;\n\n  console.log({\n    allChats\n  }); //pulls off all of the keys from the all chats Object\n\n  const topics = Object.keys(allChats); //local state\n\n  const _React$useState = React.useState(topics[0]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeTopic = _React$useState2[0],\n        changeActiveTopic = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        textValue = _React$useState4[0],\n        changeTextValue = _React$useState4[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessage = _useState2[1];\n\n  const handleSelecTopic = topic => {\n    changeActiveTopic(topic);\n    enterChatRoomAction(topic); //make request to get topic-specific message\n    // use setMessage to update message state\n    // map over messages \n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Chat App\"), React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, activeTopic), React.createElement(\"div\", {\n    className: classes.flex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.topicsWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, topics.map(topic => // on click of a list item ie a topic grab the inner text of this list item and set it as the active topic \n  React.createElement(ListItem, {\n    onClick: event => handleSelecTopic(event.target.innerText),\n    key: topic,\n    button: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: topic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }))))), React.createElement(\"div\", {\n    className: classes.chatWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, //grab our all chats object with the value of our active topic \n  allChats[activeTopic].map((chat, i) => //map over each chat\n  React.createElement(\"div\", {\n    className: classes.flex,\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Chip, {\n    label: chat.user,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body1\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, chat.message))))), React.createElement(\"div\", {\n    className: classes.flex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"outlined-basic\",\n    className: classes.chatBox,\n    label: \"Send a message!\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    value: textValue,\n    onChange: event => changeTextValue(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => {\n      //this is where we are sending out data, this is how the object will look\n      sendChatAction({\n        from: user,\n        msg: textValue,\n        topic: activeTopic\n      });\n      changeTextValue('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Send\"))));\n}","map":{"version":3,"sources":["/Users/johntraut/code/Project3/nyacht_project3/src/components/Dashboard.js"],"names":["React","useState","useEffect","makeStyles","Paper","Typography","List","ListItem","ListItemText","Chip","Button","TextField","CTX","useStyles","theme","root","margin","padding","spacing","flex","display","alignItems","topicsWindow","width","height","borderRight","chatWindow","chatBox","button","Dashboard","classes","useContext","allChats","sendChatAction","enterChatRoomAction","user","console","log","topics","Object","keys","activeTopic","changeActiveTopic","textValue","changeTextValue","messages","setMessage","handleSelecTopic","topic","map","event","target","innerText","chat","i","message","value","from","msg"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\n//for general style of MaterialUI\nimport { makeStyles } from \"@material-ui/core/styles\";\n//for paper items--\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\n//\n\n//for list items--\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n//\n\n//for user icon in chat window--\nimport Chip from '@material-ui/core/Chip';\n//\n\n//for buttons---\nimport Button from '@material-ui/core/Button';\n//\n\n//for textFeild--\nimport TextField from '@material-ui/core/TextField';\n//\n\nimport {CTX} from './Store';\n\n\n\n\n//where we can assign css values\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"50px\",\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  topicsWindow: {\n    width: \"30%\",\n    height: \"300px\",\n    borderRight: \"1px solid grey\"\n  },\n  chatWindow: {\n    width: \"70%\",\n    height: \"300px\",\n    padding: \"20px\"\n  },\n  chatBox: {\n    width: \"85%\"\n  },\n  button: {\n    width: \"15%\"\n  }\n}));\n\nexport default function Dashboard() {\n\n  const classes = useStyles();\n\n  const {allChats, sendChatAction, enterChatRoomAction, user} = React.useContext(CTX);\n\n  console.log({allChats});\n\n  //pulls off all of the keys from the all chats Object\n  const topics = Object.keys(allChats);\n\n  //local state\n  const [activeTopic, changeActiveTopic] = React.useState(topics[0])\n  const [textValue, changeTextValue] = React.useState('')\n  const [messages, setMessage]= useState([])\n\n\n  const handleSelecTopic = (topic)=>{\n    changeActiveTopic(topic)\n    enterChatRoomAction(topic)\n    //make request to get topic-specific message\n    // use setMessage to update message state\n    // map over messages \n  }\n  return (\n    <div>\n        {/* Component to break 1 */}\n      <Paper className={classes.root}>\n\n        <Typography variant=\"h4\" component=\"h4\">\n          Chat App\n        </Typography>\n        \n        <Typography variant=\"h5\" component=\"h5\">\n          {activeTopic}\n        </Typography>\n        {/* Componenet to break 2 */}\n        <div className={classes.flex}>\n          <div className={classes.topicsWindow}>\n            {/* List Items */}\n            <List>\n              {topics.map(topic => (\n                // on click of a list item ie a topic grab the inner text of this list item and set it as the active topic \n                <ListItem onClick={event => handleSelecTopic(event.target.innerText) } key={topic} button>\n                  {/* change active topic to handleSelectTopic */}\n                  <ListItemText primary={topic} />\n                </ListItem>\n              ))}\n            </List>\n            {/* End of List Items */}\n          </div>\n            \n            {/* Component to break 3 */}\n          <div className={classes.chatWindow}>\n\n            {\n              //grab our all chats object with the value of our active topic \n                allChats[activeTopic].map((chat, i) => (\n                  //map over each chat\n               <div className={classes.flex} key={i}>\n                 {/* display who its from */}\n                   <Chip label={chat.user} variant=\"outlined\" />\n                   {/* Display the message */}\n                    <Typography variant='body1' gutterBottom>{chat.message}</Typography>\n               </div>\n            \n            ))\n            }\n          </div>\n        </div>\n        {/* Componenet to break 4 */}\n        <div className={classes.flex}>\n        <div>\n        <TextField\n          id=\"outlined-basic\"\n          className={classes.chatBox}\n          label=\"Send a message!\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          value={textValue}\n          onChange={ event => changeTextValue(event.target.value)}\n        />\n      </div>\n\n        <Button \n\n        variant=\"contained\" \n        color=\"primary\" \n        className={classes.button}\n        onClick={() => {\n          //this is where we are sending out data, this is how the object will look\n            sendChatAction({from: user, msg: textValue, topic: activeTopic})\n            changeTextValue('');\n        }\n            }\n        >\n                Send\n        </Button>\n            </div>\n\n      </Paper>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}